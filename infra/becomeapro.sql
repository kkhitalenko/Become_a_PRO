--
-- PostgreSQL database dump
--

-- Dumped from database version 16.3
-- Dumped by pg_dump version 16.3

-- Started on 2024-08-20 17:38:13

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- TOC entry 4916 (class 0 OID 17115)
-- Dependencies: 239
-- Data for Name: lessons_language; Type: TABLE DATA; Schema: public; Owner: postgres
--

INSERT INTO public.lessons_language VALUES (1, 'python', 'Python — один из самых простых и доступных языков программирования. У Python понятный синтаксис, большое количество библиотек и фреймворков. Python применяют в области машинного обучения и искусственного интеллекта, в разработке веб-приложений, аналитике данных.', 'python');
INSERT INTO public.lessons_language VALUES (2, 'go', 'У Go простой и понятный синтаксис, широкий выбор инструментов, большое количество библиотек. Go хорошо подходит для высоконагруженных веб-приложений. Go применяют для разработки таких платформ как Uber, Netflix, Facebook.', 'go');
INSERT INTO public.lessons_language VALUES (3, 'rust', 'Rust — это язык программирования общего назначения, заточенный под разработку высоконагруженных систем. На нём пишут веб-приложения, браузерные движки, блокчейны и другие сложные платформы, которые обрабатывают запросы миллионов пользователей.', 'rust');


--
-- TOC entry 4912 (class 0 OID 17075)
-- Dependencies: 235
-- Data for Name: lessons_lesson; Type: TABLE DATA; Schema: public; Owner: postgres
--

INSERT INTO public.lessons_lesson VALUES (7, 'Python: Типы данных(список)', 'Списки — это последовательности чисел, строк или каких-то ещё значений. 
Вы уже присваивали переменным числовые и строковые значения, точно так же переменная может содержать и список. 
Содержимое списка пишется в квадратных скобках, элементы списка разделяются запятой:

```python
new_list = [<элемент>, <элемент>, <элемент>, <элемент>, <элемент>]
```
У каждого элемента есть свой порядковый номер - индекс, он начинается с 0. С помощью индекса можно получить значение элемента списка, вот так 

```python
my_list[index]
```', 5, 1);
INSERT INTO public.lessons_lesson VALUES (2, 'Python: Функции', 'Функция — это подпрограмма, выполняющая определённые действия. Функция может принимать на вход какие-то значения, они называются "аргументы",  что-то с ними делать, и возвращать какое-то значение. Пример
Чему будет равен var, если 
```python
def summ(a, b):
    result = a + b
    return result
```
С помощью ключевого слова def мы объявляем функцию, затем задаём ее имя - summ, в круглых скобках указываются аргументы: a и b, затем с отступом идет тело функции. В теле функции создаем переменную result, в которую кладем результат сложения тех чисел, которые пришли на вход в функцию(аргументы). Затем с помощью ключевого слова return мы возвращаем результат.
Теперь мы можем вызвать нашу функцию
```python
var = summ(2,3)
```
в переменной var будет лежать значение 5

```python
var = summ(6,3)
```
а теперь 9', 1, 1);
INSERT INTO public.lessons_lesson VALUES (4, 'Python: Циклы', 'В обычной жизни зачастую приходится выполнять серии одинаковых операций. 
Например, задача «перемыть эту груду грязных тарелок» решается так: взять тарелку — помыть — сполоснуть — вытереть — убрать — взять следующую тарелку — помыть — ...и повторять по кругу.
Этот процесс не бесконечен: работа должна продолжаться лишь при условии, что остались грязные тарелки. Тарелки кончились — работа прекращается.

Цикл в Python объявляется ключевыми словами for и in; после объявления ставится двоеточие. Ниже объявления пишут тело цикла — код, который описывает, что же нужно сделать с каждым элементом списка.
```python
for переменная in список_элементов: # Вот оно, объявление цикла
        # Тут будет тело цикла.
```
В условии цикла после for указывают имя переменной, в которую будут поочерёдно передаваться элементы из обрабатываемого списка, а после in ставится имя списка, который надо обработать. 
Продолжая метафору, «список элементов» — это груда немытых тарелок, а «переменная, объявленная в условии цикла» — это очередная взятая из груды тарелка.
Цикл автоматически прекратит работу, когда переберёт все элементы списка.
Имя переменной в цикле вы можете дать любое, но традиционно эти имена образуют от имени обрабатываемого списка, в единственном числе. Например, если список называется musicians, то переменную лучше назвать musician; если список называется pigs — переменную называют pig.', 6, 1);
INSERT INTO public.lessons_lesson VALUES (5, 'Python: Ветвления', 'Ветвления позволяют писать код, который исполняется, когда логическое выражение истинно. Ветвление объявляют оператором if. После if пишут условие — логическое выражение, результатом которого может быть True или False. Если выражение в условии истинно, то выполняется код, написанный после двоеточия. Если ложно, код после условия не сработает. 
Кстати, после # идет комментарий, он не влияет на работу кода и пишется для программиста и это никак не относится к условиям, это касается всего python кода

```python
if <условие>:
    <код, который выполнится, если условие вернуло True> 
    # Внимание: код после if должен быть отбит от начала строки 4-мя пробелами
```', 4, 1);
INSERT INTO public.lessons_lesson VALUES (6, 'Python: Основы', 'Мы начали знакомство с Python. Самое время обсудить некоторые важные моменты', 3, 1);
INSERT INTO public.lessons_lesson VALUES (1, 'Python: 0', '0', 0, 1);
INSERT INTO public.lessons_lesson VALUES (3, 'Python: Типы данных(числа и строки)', 'Ранее внутри функции мы уже создавали переменную var. Переменная хранит в себе значение.
Значения переменных различаются по своей сути: например, значения могут быть числами или строками(как в письме). Это разные типы данных. В Python есть и другие типы, например, различные коллекции для хранения чего-либо. Каждый тип данных имеет определенный набор действий, которые можно осуществлять (например, числа мы можем умножать, делить, складывать и вычитать), строки мы можем посимвольно считывать и получать нужную нам часть. Коллекции мы можем перебирать, пока не найдем нужное значение и т.д.', 2, 1);
INSERT INTO public.lessons_lesson VALUES (8, 'Go: 0', '0', 0, 2);
INSERT INTO public.lessons_lesson VALUES (12, 'Rust: 0', '0', 0, 3);
INSERT INTO public.lessons_lesson VALUES (9, 'Go: Функции', 'Так выглядит простейшая функция в Go 
```go
package main

import "fmt"

func main() {
    fmt.Println("Привет, Go!")
}
```
Каждая программа на языке Go состоит из пакетов (packages). Пакет main — главный, с него начинается выполнение программы. В приведённом выше примере импортируется пакет fmt.

Общая форма определения функции выглядит следующим образом:
```go
func function_name( [список параметров] ) [возвращаемые типы данных] {
    тело функции
}
```', 1, 2);
INSERT INTO public.lessons_lesson VALUES (10, 'Go: Циклы', 'В языке Go один оператор цикла — это for, который повторяет список инструкций заданное количество раз. Цикл состоит из трёх выражений:

Инициализация. Выполняется перед первой итерацией.
Условие. Вычисляется перед каждой итерацией.
Инкремент. Выполняется после каждой итерации.
Общая форма цикла выглядит так:
```go
for [условие | (инициализация; условие; инкремент) | диапазон] {
    [тело цикла]
}
```
При инициализации кратко объявляются переменные, которые доступны только в пределах цикла.

Цикл останавливает свою работу, когда условие принимает значение false.', 2, 2);
INSERT INTO public.lessons_lesson VALUES (11, 'Go: Условный оператор', 'Форма определения условного оператора в Go выглядит следующим образом:
```go
if [условие] {
   ...
}
```
Если выражение в поле условия истинно, код, размещённый между фигурными скобками, выполнится.

Условие описывается значением, переменной или выражением. Например:

true — выполняется всегда;
a < 10 — выполняется, когда a меньше 10;
(a < b) || (a < c) — выполняется, когда a меньше b или a меньше c;
(a < b) && (a < c) — выполняется, когда a меньше b и a меньше c.', 3, 2);


--
-- TOC entry 4914 (class 0 OID 17095)
-- Dependencies: 237
-- Data for Name: lessons_question; Type: TABLE DATA; Schema: public; Owner: postgres
--

INSERT INTO public.lessons_question VALUES (14, 'Для того, чтобы начать программировать на Python нам понадобится:
- Интерпретатор Python: программа, которая исполняет код.
- Пакетный менеджер: программа, которая знает, где взять установщик той или иной программы или библиотеки, и выполняет все необходимые действия по установке.
- Терминал: программа, которая позволяет управлять компьютером с помощью текстовых команд.
- IDE или редактор кода. IDE — интегрированная среда разработки (англ. Integrated Development Environment); система программных средств, которую программисты используют для разработки программного обеспечения. Проще говоря, это программа, в которой вы будете писать код. (VSCode или PyCharm)

Скачать Python, IDE и научиться работать с терминалом тебе придется самостоятельно  (тыжпрограммист). Когда все получится, переходи дальше', 6, 1, '🤯', '🤯', '🤯', '🤯');
INSERT INTO public.lessons_question VALUES (18, 'Не переживай, если очень страшно, отдохни и попробуй еще раз! Все получится 😊', 6, 5, '👌', '👌', '👌', '👌');
INSERT INTO public.lessons_question VALUES (16, 'Во время обучения вы постоянно будете делать ошибки в коде. И на протяжении всей своей карьеры разработчика вы тоже будете делать ошибки. Написать код, а затем отловить и исправить баги — это стандартный путь программиста. Это норма!
Python изо всех сил постарается помочь вам найти ошибку, предоставляя всю возможную информацию о проблеме: «Я сломался, ошибка на строке 8, там забыли закрыть скобку!» 
Разговаривает Python по-английски, но понять его несложно, даже если у вас нет глубоких познаний в языке. Читайте всё, что он пишет: это поможет самостоятельно разобраться с ошибкой. Сообщения об ошибках называются traceback (по-русски говорят «трейсбэк»).
Ошибки бывают разные NameError - python столкнулся с неизвестной переменной. которую мы еще не объявляли, SyntaxError - ошибка синтаксиса, EOL означает end of line, а полный текст сообщения переводится как «конец строки во время обработки текста». Python увидел открывающую кавычку, но строчка закончилась, а закрывающей кавычки не было. На этом Python сломался.
Ошибок много, ты будешь постепенно встречатся с ними во время работы и со временем привыкнешь. Все их, конечно, можно посмотреть в документации', 6, 3, '😵‍💫', '😵‍💫', '😵‍💫', '😵‍💫');
INSERT INTO public.lessons_question VALUES (19, 'Оператор if может включать блок кода, который выполнится в том случае, если условие ложно. Для этого существует конструкция if / else. 
Если условное выражение истинно, выполняется код из блока if, а если условие ложно — сработает код из блока else.

```python
if <условие>:
    <код, который выполнится, если условие истинно> 
    # Внимание: этот блок имеет отступ в 4 пробела от начала строки
else:
    <код, который выполнится, если условие ложно>
    # Этот блок тоже отбит от начала строки 4 пробелами
```

Что будет выведено в терминал?
```python
if 6<2:
    print(''6 меньше 2'')
else:
    print(''6 больше 2'')
```', 5, 2, '6 меньше 2', '6 больше 2', '🤷‍♂️', '6 больше 2');
INSERT INTO public.lessons_question VALUES (20, 'elif — это вложенная конструкция для if: «если условие для if не выполнено, но выполняется условие для elif — выполнить код в блоке elif»
Как и для оператора if,  в elif должно быть установлено условие, логическое выражение, которое вернёт True или False.

Что будет выведено в терминал?
```python
if 5 == 6:
    print(''5 равно 6'')
elif 5 > 6:
    print(''5 больше 6'')
else:
    # Если не сработало ни одно условие в предыдущем коде - выполняется код в блоке else
    print(''какие еще варианты?)'') 
```', 5, 3, '5 равно 6', '5 больше 6', 'какие еще варианты?)', 'какие еще варианты?)');
INSERT INTO public.lessons_question VALUES (1, 'Чему будет равен var, если var = func(14, 10)?

```
def func(a, b):
    result = a - b
    return result
```', 2, 1, '14', '10', '4', '4');
INSERT INTO public.lessons_question VALUES (24, 'и еще попробуй

```python
numbers = [''Раз'', ''Два'', ''Три'', ''Четыре'', ''Пять'']
for number in numbers:
    print(number)
print(''Вышел зайчик погулять'')
```', 4, 3, '🐰', '🐰', '🐰', '🐰');
INSERT INTO public.lessons_question VALUES (26, 'Круто! А теперь?

```python
numbers = [1, 2, 3, 4, 5]
for number in numbers:
    if number // 2 == 0:
        print(number)
```', 4, 5, '1', '2 4', '1 2 3 4 5', '1');
INSERT INTO public.lessons_question VALUES (3, 'Функция может принимать произвольное количество аргументов или не принимать их вовсе. Аргументы бывают позиционные (просто перечисляем их значения при вызове функции, здесь важен порядок) и именованные.  Обратимся к нашей старой функции:
```
def func(a, b):
    result = a - b
    return result
```
Если вызвать функцию func с позиционными аргументами (1, 3) , это будет значить, что a=1, b=3, но так же мы можем передать аргументы не по порядку, а используя именованные аргументы таким образом func(b=3, a=1).  

Чему будет равен var, если var = func(b=14, a=10)?

```
def func(a, b):
    result = a - b
    return result
```', 2, 3, '4', '-4', '14', '-4');
INSERT INTO public.lessons_question VALUES (28, 'Что выведет в терминал следующий код?
```go
package main

import "fmt"

func add(a int, b int) int {
    return a + b
}

func main() {
    fmt.Println(add(10, 19))
}
```', 9, 1, 'add(10, 19)', '29', '10, 19', '29');
INSERT INTO public.lessons_question VALUES (2, 'Чему будет равен var, если var = func(14, 10)?

```python
def func(a, b):
    result = a * b
    return result
```', 2, 2, '140', '14', '10', '140');
INSERT INTO public.lessons_question VALUES (4, 'В Python есть возможность задать для аргументов значение по умолчанию. Если значение для такого аргумента при вызове функции не передаётся, то используется значение по умолчанию, например 
```
def func(a=0, b=0):
    result = a + b
    return result
```
Вызов нашей функции без аргументов, т.е. func() вернёт 0, т.к. значение для a = 0  и для b = 0
А если вызовем func(a=5), вернёт 5, т.к. для b значение по умолчанию 0, а для a мы передали значение = 5

Чему будет равен var, если var = func(b=14)? 

```
def func(a=5, b=7):
    result = a + b
    return result
```', 2, 4, '12', '19', '21', '19');
INSERT INTO public.lessons_question VALUES (10, 'Со строками всё происходит не так, как с числами: при сложении двух строк Python «склеивает» содержимое этих строк в одну. 

```python
a = ''мама''
b = ''мыла''
c = ''раму''
res = a + b + c
```
res будет равен ''мамамылараму''

```python
a = ''10''
b = ''12''
```
В результате сложения a и b мы получим ''1012'', а не 22! Если python видит кавычки, то воспринимает все, что внутри них как строки, даже если это числа! Вот так

Что мы получим в результате сложения a = ''18'' и b=''10''', 3, 6, '181', '1810', '28', '1810');
INSERT INTO public.lessons_question VALUES (11, 'Типы данных очень важны, и вот почему: Python умеет производить математические операции с числами, складывать строки (совсем по-другому, как мы уже выяснили), а что же будет, если мы попробуем сложить строку и число

```python
a = ''13''
b = 14
```
Python выдаст ошибку: TypeError: unsupported operand type(s) for +: ''int'' and ''str''
Ошибки мы рассмотрим чуть позже, но на данном этапе нам важно, что он возвращает ошибку, т.к. не умеет складывать строки и числа

Что будет если сложить a = 18 и b=20', 3, 7, 'TypeError', '38', '1820', '38');
INSERT INTO public.lessons_question VALUES (12, 'Что получится в результате сложения

```python
a = ''13''
b = 14
```', 3, 8, 'TypeError', '1314', '27', 'TypeError');
INSERT INTO public.lessons_question VALUES (15, 'Где же учиться? Конечно, можно гуглить, смотреть видео на ютубе, НО есть замечательная документация! Там описано абсолютно все, что связано с самим языком 
Вот ссылка на нее: https://docs.python.org/3/tutorial/index.html
Если с английским не очень, можно начать здесь: https://pylessons.readthedocs.io/ru/latest/
Читай, на здоровье', 6, 2, '😫', '😫', '😫', '😫');
INSERT INTO public.lessons_question VALUES (17, 'Пора начать программировать. Самая простая операция в Python — это вывод данных на экран. 
Зайди в свой редактор кода и создай файл с расширением .py, напиши там следующее
```python
print(''Привет, Мир!'')
```
а теперь запусти файл (это можно сделать с помощью кнопки запуска в редакторе кода или написать в терминале python {здесь адрес до твоего файла})
В терминал должно быть: Привет, Мир!
Попробуй, если не получилось, разобраться сам, погугли или почитай документацию (тыжпрограммист)', 6, 4, '🫠', '🫠', '🫠', '🫠');
INSERT INTO public.lessons_question VALUES (13, 'Что будет выведено в терминале?
```python
if 6 > 3:
    print(''Дa'')
```', 5, 1, '6', 'Да', 'ошибка', 'Да');
INSERT INTO public.lessons_question VALUES (21, 'Как только выполняется одно из условий, все следующие elif и else игнорируются.

elif может быть сколько угодно, if и else - только по одному

Что будет выведено в терминал?
```python
a = 17
if a == 10:
    print(''10'')
elif a == 12:
    print(''12'')
elif a > 15:
    print(''больше 15'')
else:
    print(''что-то еще'')
```', 5, 4, '12', 'больше 15', 'что-то еще', 'больше 15');
INSERT INTO public.lessons_question VALUES (23, 'А теперь запусти это и отследи, что и в каком порядке печатается
```python
pigs = [''Ниф-Ниф'', ''Наф-Наф'', ''Нуф-Нуф'']
print(''Дорогие свиньи!'')

for pig in pigs:
    print(pig)
    

print(''приглашаю вас на ужин!'')
print(''Любящий вас Волк.'')
```', 4, 2, '🐺', '🐺', '🐺', '🐺');
INSERT INTO public.lessons_question VALUES (25, 'Теперь посложнее! Что будет выведено на печать?

```python
numbers = [1, 2, 3, 4, 5]
for number in numbers:
    if number % 2 == 0:
        print(number)
```', 4, 4, '2 4', '1', '1 2 3 4 5', '2 4');
INSERT INTO public.lessons_question VALUES (9, 'Перейдем к следующему типу данных - строки. Строка записывается как символ или набор символов внутри ''одинарных'' либо "двойных" кавычек.

```python
genre = ''Роман''  
author = "Джордж Оруэлл"  
title = ''1984''  # Число в кавычках тоже становится строкой
space = '' '' # Даже пробел — это тоже строка
```

Какой тип данных у переменной а?
```python
a = ''96''
```', 3, 5, 'число', '🤷‍♂️', 'строка', 'строка');
INSERT INTO public.lessons_question VALUES (30, 'Что выведет следующий код?
```go
package main
import "fmt"

func main() {
    sum := 0
    for i := 0; i < 8; i++ {
        sum += i
    }
    fmt.Println(sum)
}
```', 10, 1, '0', '8', '28', '28');
INSERT INTO public.lessons_question VALUES (5, 'С числами мы уже сталкивались ранее, здесь все просто
```
* - умножение
/ - деление
+ - сложение
- - вычитание
// - целочисленное деление 
% - остаток от деления
** - возведение в степень
```

Чему будет равен var, если 
```python
var = 7+14
```', 3, 1, '7', '14', '21', '21');
INSERT INTO public.lessons_question VALUES (6, 'Чему будет равен var, если 
```python
var = 7/14
```', 3, 2, '7', '1', '0.5', '0.5');
INSERT INTO public.lessons_question VALUES (7, 'Чему будет равен var, если 
```python
var = 7%14
```', 3, 3, '7', '1', '2', '1');
INSERT INTO public.lessons_question VALUES (8, 'Чему будет равен var, если 
```python
var = 7//14
```', 3, 4, '0', '0.5', '1', '0');
INSERT INTO public.lessons_question VALUES (22, 'Каждая строка тела цикла обязательно отбивается от начала строки четырьмя пробелами:
```python
for переменная in список_элементов:
    # Тут тело цикла: код, который выполняется для каждого элемента
    # Здесь можно обработать переменную, объявленную в условии цикла,
    # например, напечатать её значение: print(переменная)
```
Теперь можно написать цикл, который автоматически напечатает имена всех этих хиппи из команды «Бременские музыканты».

```python
bremen_musicians = [''Кот'', ''Пёс'', ''Трубадур'', ''Осёл'', ''Петух'']
for musician in bremen_musicians:
    # Каждый элемент списка bremen_musicians по очереди будет передан в переменную musician и напечатан
    print(musician)

# Здесь может быть какой-то код, который выполнится
# только после того, как цикл закончит работу
```
Попробуй это сделать в своем редакторе кода и запустить', 4, 1, 'получилось!', 'получилось!', 'получилось!', 'получилось!');
INSERT INTO public.lessons_question VALUES (27, 'Запусти код ниже у себя в редакторе, что получится?

```python
russian_alphabet = [''а'',''б'',''в'',''г'',''д'',''е'',''ё'',''ж'',''з'',''и'',''й'',''к'',''л'',''м'',''н'',''о'',''п'',''р'',''с'',''т'',''у'',''ф'',''х'',''ц'',''ч'',''ш'',''щ'',''ъ'',''ы'',''ь'',''э'',''ю'',''я'']
print(russian_alphabet[1])  # Напечатать содержимое элемента с индексом 1
print(russian_alphabet[2])
```', 7, 1, 'а б', 'б в', 'в г', 'б в');
INSERT INTO public.lessons_question VALUES (29, 'Определение переменной в Go означает передачу компилятору информации о типе данных, а так же о месте и объёме хранилища, которое создаётся для этой переменной. Определять переменные одного типа можно по одному и списком. Общая форма такая:
```go
var [перечень переменных] [тип данных];
```
С помощью оператора var определяем перечень переменных, причём тип данных указываем в конце выражения.

Объявление возможно как на уровне пакета, так и на уровне функции.
```go
package main

import "fmt"

var node, golang, angular bool

func main() {
    var x int
    fmt.Println(x, node, golang, angular)
}
```
Что выведет этот код?', 9, 2, '0 false false false', 'false false false false', '0 false 0 false', '0 false false false');
INSERT INTO public.lessons_question VALUES (31, 'Что выведет код?
```go
package main

import (
    "fmt"
)

func main() {
    if true {
        fmt.Println("Выполнится всегда")
    }

    if false {
        fmt.Println("Не выполнится никогда")
    }
}
```', 11, 1, 'Выполнится всегда', 'Не выполнится никогда', 'Ошибка', 'Выполнится всегда');


--
-- TOC entry 4922 (class 0 OID 0)
-- Dependencies: 238
-- Name: lessons_language_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.lessons_language_id_seq', 3, true);


--
-- TOC entry 4923 (class 0 OID 0)
-- Dependencies: 234
-- Name: lessons_lesson_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.lessons_lesson_id_seq', 12, true);


--
-- TOC entry 4924 (class 0 OID 0)
-- Dependencies: 236
-- Name: lessons_question_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.lessons_question_id_seq', 31, true);


-- Completed on 2024-08-20 17:38:13

--
-- PostgreSQL database dump complete
--

